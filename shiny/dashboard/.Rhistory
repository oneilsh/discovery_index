irels
head(irels)
str(head(neoRels$properties))
install.packages("rstackdeque")
library(rstackdeque)
neoRels$properties %>% as.rstack()
neoRels$properties %>% as.rstack() %>% as.data.frame()
neoRels$properties %>% map(names)
library(purrr)
neoRels$properties %>% map(names)
neoRels$properties %>% map(names) %>% unlist() %>% unique()
neoRels$properties %>% map(p ~ p$source)
neoRels$properties %>% map(~ .x$source)
neoRels$properties %>% map(names) %>% unlist() %>% unique()
neoRels$properties %>% map(~ .x$likeliness)
neoRels$properties %>% map(~ .x$likeliness) %>% unlist()
neoRels$properties %>% map(~ .x$likeliness || NA)
neoRels$properties %>% map(~ if(!is.null(.x$likeliness)) {.x$likeliness} else {N A} )
neoRels$properties %>% map(~ if(!is.null(.x$likeliness)) {.x$likeliness} else {NA} )
neoRels$properties %>% map(~ if(!is.null(.x$likeliness)) {.x$likeliness} else {NA} ) %>% unlist()
getPropValues <- function(relationships, propertyStr) {
relationships$properties %>% map(~ if(!is.null(.x[[propertyStr]])) {.x[[propertyStr]]} else {NA} ) %>% unlist() %>% return()
}
getPropValues(neoRels, "type")
getPropValues(neoRels, "likeliness")
relProps
relProps <- neoRels$properties %>% map(names) %>% unlist() %>% unique()
relProps
relProps %>% map(getPropValues(.x))
relProps %>% map(getPropValues(neoRels, .x))
relProps %>% map(~getPropValues(neoRels, .x))
relProps %>% map(~getPropValues(neoRels, .x)) %>% str()
getPropValues(neoRels, "likeliness")
names(relProps) <- relProps
relProps %>% map(~getPropValues(neoRels, .x)) %>% str()
relPropCols <- relProps %>% map(~getPropValues(neoRels, .x)) %>% as.data.frame()
relPropCols
head(relPropCols)
head(irels)
irels <- cbind(irels, relPropCols)
head(irels)
head(neoNodes)
nodeProps <- neoNodes$properties %>% map(names) %>% unlist() %>% unique()
nodeProps
names(nodeProps) <- nodeProps
getPropValues <- function(props_list, propertyStr) {
props_list %>% map(~ if(!is.null(.x[[propertyStr]])) {.x[[propertyStr]]} else {NA} ) %>% unlist() %>% return()
}
relPropCols <- relProps %>% map(~getPropValues(neoRels$properties, .x)) %>% as.data.frame()
relPropCols
head(relPropCols)
nodePropCols <- nodeProps %>% map(~getPropValues(neoNodes$properties, .x)) %>% as.data.frame()
head(nodePropCols)
head(neoNodes)
head(neoNodes$label)
neoNodes$label
neoNodes$label %>% map(.x[[1]])
neoNodes$label %>% map(~.x[[1]])
neoNodes$label %>% map(~.x[[1]]) %>% unlist()
head(neoNodes)
inodes <- cbind(neoNodes$id, nodeFirstLabels, nodePropCols)
nodePropCols <- nodeProps %>% map(~getPropValues(neoNodes$properties, .x)) %>% as.data.frame()
nodeFirstLabels <- neoNodes$label %>% map(~.x[[1]]) %>% unlist()
inodes <- cbind(neoNodes$id, nodeFirstLabels, nodePropCols)
head(inodes)
neo_to_igraph <- function(G) {
neoRels <- G$relationships
neoNodes <- G$nodes
irels <- data.frame(from = neoRels$startNode, to = neoRels$endNode, label = neoRels$type, relId = neoRels$id)
relProps <- neoRels$properties %>% map(names) %>% unlist() %>% unique()
names(relProps) <- relProps
getPropValues <- function(props_list, propertyStr) {
props_list %>% map(~ if(!is.null(.x[[propertyStr]])) {.x[[propertyStr]]} else {NA} ) %>% unlist() %>% return()
}
relPropCols <- relProps %>% map(~getPropValues(neoRels$properties, .x)) %>% as.data.frame()
irels <- cbind(irels, relPropCols)
nodeProps <- neoNodes$properties %>% map(names) %>% unlist() %>% unique()
names(nodeProps) <- nodeProps
nodePropCols <- nodeProps %>% map(~getPropValues(neoNodes$properties, .x)) %>% as.data.frame()
nodeFirstLabels <- neoNodes$label %>% map(~.x[[1]]) %>% unlist()
inodes <- cbind(nodeId = neoNodes$id, nodeFirstLabels, nodePropCols)
return(igraph::graph.data.frame(irels, vertices = inodes))
}
neo_to_igraph(G)
plot(neo_to_igraph(G))
ig <- neo_to_igraph(G)
d3g <- igraph_to_networkD3(ig)
plot(d3g)
str(d3g)
links <- d3g$links
nodes <- d3g$nodes
head(links)
head(nodes)
head(MisLinks)
head(MisNodes)
forceNetwork(d3g)
forceNetwork(ig)
neo_to_propgraph <- function(G) {
neoRels <- G$relationships
neoNodes <- G$nodes
irels <- data.frame(from = neoRels$startNode, to = neoRels$endNode, label = neoRels$type, relId = neoRels$id)
relProps <- neoRels$properties %>% map(names) %>% unlist() %>% unique()
names(relProps) <- relProps
getPropValues <- function(props_list, propertyStr) {
props_list %>% map(~ if(!is.null(.x[[propertyStr]])) {.x[[propertyStr]]} else {NA} ) %>% unlist() %>% return()
}
relPropCols <- relProps %>% map(~getPropValues(neoRels$properties, .x)) %>% as.data.frame()
irels <- cbind(irels, relPropCols)
nodeProps <- neoNodes$properties %>% map(names) %>% unlist() %>% unique()
names(nodeProps) <- nodeProps
nodePropCols <- nodeProps %>% map(~getPropValues(neoNodes$properties, .x)) %>% as.data.frame()
nodeFirstLabels <- neoNodes$label %>% map(~.x[[1]]) %>% unlist()
inodes <- cbind(nodeId = neoNodes$id, nodeFirstLabels, nodePropCols)
return(list(nodes = inodes, edges = irels))
}
ig <- neo_to_propgraph(G)
head(ig)
str(ig)
as.factor(c("1", "3", "7", "4"))
as.factor(c("1", "3", "7", "4")) %>% as.integer()
as.factor(c("1", "3", "7", "4")) %>% levels()
head(inodes)
inodes <- cbind(nodeId = neoNodes$id, nodeFirstLabels, nodePropCols)
head(inodes)
head(irels)
factor(inodes$nodeId)
factor(inodes$nodeId)
factor(inodes$nodeId) %>% as.integer() -1
neo_to_propgraph <- function(G) {
neoRels <- G$relationships
neoNodes <- G$nodes
irels <- data.frame(from = neoRels$startNode, to = neoRels$endNode, label = neoRels$type, relId = neoRels$id)
relProps <- neoRels$properties %>% map(names) %>% unlist() %>% unique()
names(relProps) <- relProps
getPropValues <- function(props_list, propertyStr) {
props_list %>% map(~ if(!is.null(.x[[propertyStr]])) {.x[[propertyStr]]} else {NA} ) %>% unlist() %>% return()
}
relPropCols <- relProps %>% map(~getPropValues(neoRels$properties, .x)) %>% as.data.frame()
irels <- cbind(irels, relPropCols)
nodeProps <- neoNodes$properties %>% map(names) %>% unlist() %>% unique()
names(nodeProps) <- nodeProps
nodePropCols <- nodeProps %>% map(~getPropValues(neoNodes$properties, .x)) %>% as.data.frame()
nodeFirstLabels <- neoNodes$label %>% map(~.x[[1]]) %>% unlist()
inodes <- cbind(nodeId = neoNodes$id, nodeFirstLabels, nodePropCols)
nodeIdFactor <- factor(inodes$nodeId)
nodeIdLevels <- levels(nodeIdFactor)
inodes$nodeId <- factor(inodes$nodeId, levels = nodeIdLevels) %>% as.integer() - 1
irels$from <- factor(irels$from, levels = nodeIdLevels) %>% as.integer() - 1
irels$to <- factor(irels$to, levels = nodeIdLevels) %>% as.integer() - 1
return(list(nodes = inodes, edges = irels))
}
ig <- neo_to_propgraph(G)
nodes <- ig$nodes
nodes <- ig$edges
nodes <- ig$nodes
edges <- ig$edges
head(nodes)
head(edges)
forceNetwork(Links = edges, Nodes = nodes)
forceNetwork(Links = edges, Nodes = nodes, NodeId = "nodeId")
forceNetwork(Links = edges, Nodes = nodes, Source = "from", Target = "to", NodeId = "nodeId")
forceNetwork(Links = edges, Nodes = nodes, Source = "from", Target = "to")
forceNetwork(Links = edges, Nodes = nodes, Source = "from", Target = "to", NodeID = "nodeId")
forceNetwork(Links = edges, Nodes = nodes, Source = "from", Target = "to", NodeID = "nodeId", group = label)
forceNetwork(Links = edges, Nodes = nodes, Source = "from", Target = "to", NodeID = "nodeId", group = "label")
forceNetwork(Links = edges, Nodes = nodes, Source = "from", Target = "to", NodeID = "nodeId", Group = "label")
head(nodes)
forceNetwork(Links = edges, Nodes = nodes, Source = "from", Target = "to", NodeID = "nodeId", Group = "nodeFirstLabels")
visNetwork(nodes, edges)
library(visNetwork)
visNetwork(nodes, edges)
neo_to_propgraph <- function(G) {
neoRels <- G$relationships
neoNodes <- G$nodes
irels <- data.frame(from = neoRels$startNode, to = neoRels$endNode, label = neoRels$type, relId = neoRels$id)
relProps <- neoRels$properties %>% map(names) %>% unlist() %>% unique()
names(relProps) <- relProps
getPropValues <- function(props_list, propertyStr) {
props_list %>% map(~ if(!is.null(.x[[propertyStr]])) {.x[[propertyStr]]} else {NA} ) %>% unlist() %>% return()
}
relPropCols <- relProps %>% map(~getPropValues(neoRels$properties, .x)) %>% as.data.frame()
irels <- cbind(irels, relPropCols)
nodeProps <- neoNodes$properties %>% map(names) %>% unlist() %>% unique()
names(nodeProps) <- nodeProps
nodePropCols <- nodeProps %>% map(~getPropValues(neoNodes$properties, .x)) %>% as.data.frame()
nodeFirstLabels <- neoNodes$label %>% map(~.x[[1]]) %>% unlist()
inodes <- cbind(id = neoNodes$id, firstLabel = nodeFirstLabels, nodePropCols)
#nodeIdFactor <- factor(inodes$nodeId)
#nodeIdLevels <- levels(nodeIdFactor)
#inodes$nodeId <- factor(inodes$nodeId, levels = nodeIdLevels) %>% as.integer() - 1
#irels$from <- factor(irels$from, levels = nodeIdLevels) %>% as.integer() - 1
#irels$to <- factor(irels$to, levels = nodeIdLevels) %>% as.integer() - 1
return(list(nodes = inodes, edges = irels))
}
ig <- neo_to_propgraph(G)
nodes <- ig$nodes
edges <- ig$edges
visNetwork(nodes, edges)
G <- "
match (n) -[r]-> (q) WHERE
((NOT exists(r.type)) OR
(NOT r.type = 'ASSOC_PRIMARY'))
AND
((size(() --> (q)) > 1) OR
NOT (q:ExternalId))
return n, r, q" %>% call_neo4j(con, type = "graph")
G
neo_to_propgraph <- function(G) {
neoRels <- G$relationships
neoNodes <- G$nodes
irels <- data.frame(from = neoRels$startNode, to = neoRels$endNode, label = neoRels$type, relId = neoRels$id)
relProps <- neoRels$properties %>% map(names) %>% unlist() %>% unique()
names(relProps) <- relProps
getPropValues <- function(props_list, propertyStr) {
props_list %>% map(~ if(!is.null(.x[[propertyStr]])) {.x[[propertyStr]]} else {NA} ) %>% unlist() %>% return()
}
relPropCols <- relProps %>% map(~getPropValues(neoRels$properties, .x)) %>% as.data.frame()
irels <- cbind(irels, relPropCols)
nodeProps <- neoNodes$properties %>% map(names) %>% unlist() %>% unique()
names(nodeProps) <- nodeProps
nodePropCols <- nodeProps %>% map(~getPropValues(neoNodes$properties, .x)) %>% as.data.frame()
nodeFirstLabels <- neoNodes$label %>% map(~.x[[1]]) %>% unlist()
inodes <- cbind(id = neoNodes$id, firstLabel = nodeFirstLabels, nodePropCols)
#nodeIdFactor <- factor(inodes$nodeId)
#nodeIdLevels <- levels(nodeIdFactor)
#inodes$nodeId <- factor(inodes$nodeId, levels = nodeIdLevels) %>% as.integer() - 1
#irels$from <- factor(irels$from, levels = nodeIdLevels) %>% as.integer() - 1
#irels$to <- factor(irels$to, levels = nodeIdLevels) %>% as.integer() - 1
return(list(nodes = inodes, edges = irels))
}
ig <- neo_to_propgraph(G)
nodes <- ig$nodes
edges <- ig$edges
visNetwork(nodes, edges)
head(nodes)
head(edges)
con <- neo4j_api$new(
url = "https://tehr-discovery-index-dev.cgrb.oregonstate.edu:7473",
user = "neo4j",
password = pass
)
G <-"MATCH a=(p)-[r]->(m) RETURN a;" %>%
call_neo4j(con, type = "graph")
G$relationships %>% unnest_relationships()
G %>% unnest_graph()
visNetwork(nodes, edges, wdth = "100%", height = "100%")
visNetwork(nodes, edges, wdth = "800", height = "800")
str(edges)
str(nodes)
nodes$title <- nodes$firstLabel
visNetwork(nodes, edges, wdth = "800", height = "800")
visNetwork(nodes, edges)
nodes$label <- nodes$firstLabel
visNetwork(nodes, edges)
head(nodes)
nodes$label <- nodes$firstLabel
visNetwork(nodes, edges) %>%
visGroups(groupname = "firstLabel", color = list(background = "gray"))
nodes$group <- nodes$label
visNetwork(nodes, edges) %>%
visGroups(groupname = "PrimaryId", color = list(background = "gray"))
#nodes$label <- nodes$firstLabel
nodes$group <- nodes$label
visNetwork(nodes, edges) %>%
visGroups(groupname = "PrimaryId", color = list(background = "gray"))
visNetwork(nodes, edges) %>%
visGroups(groupname = "PrimaryId", color = list(background = "gray")) %>%
visClusteringByColor()
?visClusteringByGroup
visNetwork(nodes, edges) %>%
visGroups(groupname = "PrimaryId", color = list(background = "gray")) %>%
visClusteringByGroup(groups = nodes$group)
visNetwork(nodes, edges) %>%
visGroups(groupname = "PrimaryId", color = list(background = "gray")) %>%
visClusteringByGroup(groups = 1)
visNetwork(nodes, edges) %>%
visGroups(groupname = "A", color = "red", shape = "database") %>%
visGroups(groupname = "B", color = "yellow", shape = "triangle") %>%
visClusteringByGroup(groups = c("B"), label = "Group : ",
shape = "ellipse", color = "blue", force = TRUE) %>%
visLegend()
visNetwork(nodes, edges) %>%
visGroups(groupname = "A", color = "red", shape = "database") %>%
visGroups(groupname = "B", color = "yellow", shape = "triangle") %>%
visClusteringByGroup(groups = c("B"), label = "Group : ",
shape = "ellipse", color = "blue", force = TRUE) %>%
visLegend()
nodes <- data.frame(id = 1:10, label = paste("Label", 1:10),
group = sample(c("A", "B"), 10, replace = TRUE))
edges <- data.frame(from = c(2,5,10), to = c(1,2,10))
visNetwork(nodes, edges) %>%
visGroups(groupname = "A", color = "red", shape = "database") %>%
visGroups(groupname = "B", color = "yellow", shape = "triangle") %>%
visClusteringByGroup(groups = c("B"), label = "Group : ",
shape = "ellipse", color = "blue", force = TRUE) %>%
visLegend()
visNetwork(nodes, edges) %>%
visGroups(groupname = "A", color = "red", shape = "database") %>%
visGroups(groupname = "B", color = "yellow", shape = "triangle") %>%
visClusteringByGroup(groups = c("B"), label = "Group : ",
shape = "ellipse", color = "blue", force = TRUE) %>%
visLegend()
visNetwork(nodes, edges) %>%
visGroups(groupname = "A", color = "red", shape = "database") %>%
visGroups(groupname = "B", color = "yellow", shape = "triangle") %>%
visClusteringByGroup(groups = c("B"), label = "Group : ",
shape = "ellipse", color = "blue", force = TRUE) %>%
visLegend()
nodes$group <- nodes$label
visNetwork(nodes, edges)
nodes <- ig$nodes
edges <- ig$edges
#nodes$label <- nodes$firstLabel
nodes$group <- nodes$label
visNetwork(nodes, edges) %>%
visGroups(groupname = "PrimaryId", color = list(background = "gray")) %>%
forceNetwork(Links = edges, Nodes = nodes, Source = "from", Target = "to", NodeID = "nodeId", Group = "nodeFirstLabels")
neo_to_propgraph <- function(G) {
neoRels <- G$relationships
neoNodes <- G$nodes
irels <- data.frame(from = neoRels$startNode, to = neoRels$endNode, label = neoRels$type, relId = neoRels$id)
relProps <- neoRels$properties %>% map(names) %>% unlist() %>% unique()
names(relProps) <- relProps
getPropValues <- function(props_list, propertyStr) {
props_list %>% map(~ if(!is.null(.x[[propertyStr]])) {.x[[propertyStr]]} else {NA} ) %>% unlist() %>% return()
}
relPropCols <- relProps %>% map(~getPropValues(neoRels$properties, .x)) %>% as.data.frame()
irels <- cbind(irels, relPropCols)
nodeProps <- neoNodes$properties %>% map(names) %>% unlist() %>% unique()
names(nodeProps) <- nodeProps
nodePropCols <- nodeProps %>% map(~getPropValues(neoNodes$properties, .x)) %>% as.data.frame()
nodeFirstLabels <- neoNodes$label %>% map(~.x[[1]]) %>% unlist()
inodes <- cbind(id = neoNodes$id, firstLabel = nodeFirstLabels, nodePropCols)
return(list(nodes = inodes, edges = irels))
}
ig <- neo_to_propgraph(G)
nodes <- ig$nodes
edges <- ig$edges
#nodes$label <- nodes$firstLabel
nodes$group <- nodes$label
visNetwork(nodes, edges)
G <- "
match (n) -[r]-> (q) WHERE
((NOT exists(r.type)) OR
(NOT r.type = 'ASSOC_PRIMARY'))
AND
((size(() --> (q)) > 1) OR
NOT (q:ExternalId))
return n, r, q" %>% call_neo4j(con, type = "graph")
neo_to_propgraph <- function(G) {
neoRels <- G$relationships
neoNodes <- G$nodes
irels <- data.frame(from = neoRels$startNode, to = neoRels$endNode, label = neoRels$type, relId = neoRels$id)
relProps <- neoRels$properties %>% map(names) %>% unlist() %>% unique()
names(relProps) <- relProps
getPropValues <- function(props_list, propertyStr) {
props_list %>% map(~ if(!is.null(.x[[propertyStr]])) {.x[[propertyStr]]} else {NA} ) %>% unlist() %>% return()
}
relPropCols <- relProps %>% map(~getPropValues(neoRels$properties, .x)) %>% as.data.frame()
irels <- cbind(irels, relPropCols)
nodeProps <- neoNodes$properties %>% map(names) %>% unlist() %>% unique()
names(nodeProps) <- nodeProps
nodePropCols <- nodeProps %>% map(~getPropValues(neoNodes$properties, .x)) %>% as.data.frame()
nodeFirstLabels <- neoNodes$label %>% map(~.x[[1]]) %>% unlist()
inodes <- cbind(id = neoNodes$id, firstLabel = nodeFirstLabels, nodePropCols)
return(list(nodes = inodes, edges = irels))
}
ig <- neo_to_propgraph(G)
nodes <- ig$nodes
edges <- ig$edges
#nodes$label <- nodes$firstLabel
nodes$group <- nodes$label
visNetwork(nodes, edges)
visNetwork(nodes, edges) %>%
visGroups() #groupname = "PrimaryId", color = list(background = "gray")) %>%
visNetwork(nodes, edges) %>%
visGroups(groupname = "PrimaryId", color = list(background = "gray")) %>%
forceNetwork(Links = edges, Nodes = nodes, Source = "from", Target = "to", NodeID = "nodeId", Group = "nodeFirstLabels")
visNetwork(nodes, edges) %>%
visGroups(groupname = "PrimaryId", color = list(background = "gray")) %>%
forceNetwork(Links = edges, Nodes = nodes, Source = "from", Target = "to", NodeID = "nodeId", Group = "nodeFirstLabels")
head(nodes)
#nodes$label <- nodes$firstLabel
nodes$group <- nodes$firstLabel
visNetwork(nodes, edges) %>%
visGroups(groupname = "PrimaryId", color = list(background = "gray")) %>%
forceNetwork(Links = edges, Nodes = nodes, Source = "from", Target = "to", NodeID = "nodeId", Group = "nodeFirstLabels")
nodes <- ig$nodes
edges <- ig$edges
#nodes$label <- nodes$firstLabel
nodes$group <- nodes$firstLabel
visNetwork(nodes, edges) %>%
visGroups(groupname = "PrimaryId", color = list(background = "gray")) %>%
forceNetwork(Links = edges, Nodes = nodes, Source = "from", Target = "to", NodeID = "nodeId", Group = "nodeFirstLabels")
visNetwork(nodes, edges) %>%
visGroups(groupname = "PrimaryId", color = list(background = "gray"))
head(nodes)
visNetwork(nodes, edges) %>%
visGroups(groupname = "PrimaryProfile", color = list(background = "gray"))
visNetwork(nodes, edges) %>%
visGroups(groupname = "PrimaryProfile", color = list(background = "gray")) %>%
visLegend()
visNetwork(nodes, edges) %>%
visGroups(groupname = "PrimaryProfile", color = list(background = "gray")) %>%
visLegend(ncol = 2)
visNetwork(nodes, edges) %>%
visGroups(groupname = "PrimaryProfile", color = list(background = "gray")) %>%
visLegend(addEdges = edges)
visNetwork(nodes, edges) %>%
visGroups(groupname = "PrimaryProfile", color = list(background = "gray"))
head(nodes)
head(nodes, n = 2-)
head(nodes, n = 20)
tail(nodes, n = 20)
#nodes$label <- nodes$firstLabel
nodes <- nodes %>%
mutate(title = case_when(firstLabel == "GithubRepo" ~ name,
firstLable == "Work" ~ title,
TRUE ~ ""))
#nodes$label <- nodes$firstLabel
nodes <- nodes %>%
mutate(title = case_when(firstLabel == "GithubRepo" ~ name,
firstLabel == "Work" ~ title,
TRUE ~ ""))
nodes$group <- nodes$firstLabel
visNetwork(nodes, edges) %>%
visGroups(groupname = "PrimaryProfile", color = list(background = "gray"))
#nodes$label <- nodes$firstLabel
nodes <- nodes %>%
mutate(label = case_when(firstLabel == "GithubRepo" ~ name,
firstLabel == "Work" ~ title,
TRUE ~ ""))
nodes$group <- nodes$firstLabel
visNetwork(nodes, edges) %>%
visGroups(groupname = "PrimaryProfile", color = list(background = "gray"))
install.packages("shinydashboard")
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
Sys.getenv("USER")
Sys.getenv("USERSDF")
?Sys.getenv
Sys.getenv("USERSDF", NA)
pass
Sys.setenv("NEO_PASS", pass)
?Sys.setenv
Sys.setenv(NEO_PASS = pass)
con <- neo4j_api$new(
url = Sys.getenv("NEO_URL", "https://tehr-discovery-index-dev.cgrb.oregonstate.edu:7473"),
user = Sys.getenv("NEO_USER", "neo4j"),
password = Sys.getenv("NEO_PASS", "neo4j")
)
G <-"MATCH a=(p)-[r]->(m) RETURN a;" %>%
call_neo4j(con, type = "graph")
G
?textArea
?textAreaInput
runApp()
runApp()
runApp()
runApp()
?call_neo4j
neo4r::launch_con_pane()
neo4r::launch_con_pane(con)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
textAreaInput()
textAreaInput("hey")
textAreaInput(label = "hey")
textAreaInput(label = "hey", inputId = "what")
runApp()
runApp()
runApp()
?box
runApp()
?actionButton
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
traceback()
runApp()
runApp()
?case_when
runApp()
runApp()
runApp()
