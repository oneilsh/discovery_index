
<!-- panels:start -->
<!-- div:title-panel -->

## Deployment

<!-- div:left-panel -->

DI is deployed via [docker compose](https://docs.docker.com/compose/) and configured via environment variables:

```bash
git clone https://github.com/oneilsh/discovery_index.git
CERTS_PATH=/path/to/certs \
  GITHUB_TOKEN=8a96da92be1096ccc6bebb765e09910a568c \
  ADMIN_USER=admin \
  ADMIN_PASS=supersecret \
  docker-compose up -d
```

where `ADMIN_USER` and `ADMIN_PASSWORD` are the desired API username and password, `GITHUB_TOKEN` is a GitHub personal access token with read- or access-only scopes enabled, and `CERTS_PATH` is a folder with structure (including filenames):

```
private.key
public.crt
revoked/
trusted/public.crt
```

The service will run on port 443. To run on another port (e.g. 80) without certificates, use `API_PORT=80 API_INSECURE=true`.

#### *Fine print*

By default, the docker-compose file creates a named volume for the database, permitting upgrades without data loss with `docker-compose`. Note however
that the neo4j container stores authentication in the named volume, so to update the `ADMIN_PASS` (the only setting affected by this issue) be sure to run `docker-compose exec neo4j rm -f data/dbms/auth`
before restarting the the neo4j service should you need to. 

<!-- div:right-panel -->


<!-- panels:end -->
