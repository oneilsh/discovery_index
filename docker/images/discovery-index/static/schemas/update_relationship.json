{
  "type": "object",
  "examples": [
    {
      "exampleDescription": "Create a new PET node with relationship HAS_PET",
      "primaryId": "oneilsh",
      "source": "example1",
      "clearFirst": true,
      "edge": {
        "label": "HAS_PET"
      },
      "target": {
        "labels": [
          "PET"
        ],
        "properties": {
          "type": "Cat",
          "name": "Sterling Cooper"
        }
      }
    },
    {
      "exampleDescription": "Create a new PET node with relationship HAS_PET, unless the pet name or type is empty or unset (which it is in this case)",
      "primaryId": "oneilsh",
      "source": "example1",
      "clearFirst": true,
      "ignoreIfAnyEmpty": ["target.properties.name", "target.properties.type"],
      "edge": {
        "label": "HAS_PET"
      },
      "target": {
        "labels": [
          "PET"
        ],
        "properties": {
          "type": "Cat",
          "name": ""
        }
      }
    },
    {
      "exampleDescription": "Create several new PET nodes with relationship HAS_PET, using 'demo-project' as a disambiguation property added to all created nodes and edges.",
      "diProject": "demo-project",
      "primaryId": "oneilsh",
      "source": "example1",
      "clearFirst": true,
      "edge": {
        "label": "HAS_PET"
      },
      "target": {
        "labels": [
          "PET"
        ],
        "properties": {
          "type": "Cat",
          "name": "Sterling Cooper,Byron Bojangles"
        }
      },
      "repeat": {
        "property": "target.properties.name",
        "splitChar": ","
      }
    },
    {
      "exampleDescription": "Create a new PET node with several relationships with different properties",
      "primaryId": "oneilsh",
      "source": "example1",
      "clearFirst": true,
      "edge": {
        "label": "CARES_FOR",
        "properties": {
          "careAction": "feed,pet,snuggle"
        }
      },
      "target": {
        "labels": [
          "PET"
        ],
        "properties": {
          "type": "Cat",
          "name": "Sterling Cooper"
        }
      },
      "repeat": {
        "property": "edge.properties.careAction",
        "splitChar": ","
      }
    },
    {
      "exampleDescription": "Create a new PET node and relationship, convert values to integer or numeric (to work around form APIs that only support string)",
      "primaryId": "oneilsh",
      "source": "example1",
      "clearFirst": true,
      "edge": {
        "label": "HAS_PET",
        "properties": {
          "sinceYears": "3.7"
        }
      },
      "target": {
        "labels": [
          "PET"
        ],
        "properties": {
          "type": "Cat",
          "name": "Sterling Cooper",
          "age": "4"
        }
      },
      "convert": {
        "target.properties.age": "integer",
        "edge.properties.sinceYears": "float"
      }
    }
  ],
  "properties": {
    "primaryId": {
      "type": "string",
      "examples": [
        "oneils@oregonstate.edu",
        "12-12124-142"
      ],
      "description": "Primary, stable identifier representing an individual application-wide."
    },
    "source": {
      "type": "string",
      "description": "A tag indicating where this information comes from; if clearFirst is set to true relationships generated by this source tag are first cleared before update.",
      "examples": [
        "form_question_1",
        "form question 1"
      ]
    },
    "edge": {
      "type": "object",
      "required": [
        "label"
      ],
      "properties": {
        "label": {
          "type": "string",
          "pattern": "^[A-Za-z0-9_-]+$",
          "description": "Edge label to use; by neo4j convention these are upper-snake-case.",
          "examples": [
            "HAS_EXPERTISE"
          ]
        },
        "properties": {
          "type": "object",
          "default": "{}",
          "description": "Additional properties to set on new edge(s). Must be string or number values only currently. ",
          "patternProperties": {
            "diStyle": {
              "type": "object"
            },
            "^(?!diStyle).*$": {
              "type": ["string", "number"]
            }
          },
          "examples": [
            {
              "expertiseRealm": "personal"
            },
            {
              "expertiseRealm": "personal, work"
            }
          ]
        }
      },
      "description": "Description of new edge(s) to create."
    },
    "target": {
      "type": "object",
      "required": [
        "labels"
      ],
      "properties": {
        "labels": {
          "type": "array",
          "items": {
            "type": "string",
            "pattern": "^[A-Za-z0-9_-]+$",
            "examples": [
              "Person",
              "Topic"
            ]
          },
          "minItems": 1,
          "description": "Labels to add to target node(s). By neo4j convention CapitalCamelCase."
        },
        "properties": {
          "type": "object",
          "default": "{}",
          "description": "Additional properties to set on new target node(s). Must be numeric or string currently. ",
          "patternProperties": { 
            "diStyle": {
              "type": "object"
            },
            "^(?!diStyle).*$": {
              "type": ["string", "number"]
            }
          },
          "examples": [
            {
              "name": "Shawn",
              "age": 37
            },
            {
              "name": "Shawn",
              "expertise": "coding, drinking coffee, sleeping"
            }
          ]
        }
      },
      "description": "Description of new target node(s) to create. By convention "
    },
    "clearFirst": {
      "type": "boolean",
      "description": "Whether or not to first clear out existing relationships matching given 'source' key.",
      "default": true
    },
    "repeat": {
      "type": "object",
      "required": [
        "property",
        "splitChar"
      ],
      "properties": {
        "property": {
          "type": "string",
          "description": "The property of this relationship to split over, defined by json path.",
          "examples": [
            "target.properties.expertise",
            "edge.properties.expertiseRealm"
          ]
        },
        "splitChar": {
          "type": "string",
          "description": "The character to split the given property on, usually comma",
          "default": ","
        }
      },
      "description": "Allows 'splitting' new relationships into either multiple different targets with the same edge repeated to them, or a single target with multiple different edges pointing to it."
    },
    "convert": {
      "type": "object",
      "description": "Convert value from string to either integer or float by path (post-splitting via repeat if used). Keys must be valid json path in this relationship (post-splitting w/ repeat, if used).",
      "default": {},
      "patternProperties": {
        ".*": {
          "type": "string",
          "enum": [
            "integer",
            "float"
          ]
        }
      },
      "examples": [
        {
          "target.properties.age": "integer"
        }
      ]
    },
    "diProject": {
      "type": "string",
      "description": "Property added to all nodes and edges - useful for running multiple projects in the same database/deployment.",
      "default": "default"
    },
    "ignoreIfAnyEmpty": {
      "type": "array",
      "default": "[]",
      "items": {
        "type": "string",
        "examples": [
          "target.properties.url",
          "edge.properties.name"
        ]
      },
      "description": "Don't add relationships or nodes if any of the specified paths are unset or empty string. Useful for allowing non-answers to questions. Evaluating post-splitting if repeat is used."
    }
  },
  "required": [
    "primaryId",
    "source",
    "edge",
    "target",
    "clearFirst"
  ]
}
